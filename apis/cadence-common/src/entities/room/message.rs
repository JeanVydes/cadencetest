use sea_orm::entity::prelude::*;
use serde::{self, Deserialize, Serialize};

use crate::types::{ID, Timestamp};

#[derive(
    Debug, Clone, Serialize, Deserialize, PartialEq, PartialOrd, Eq, Ord, EnumIter, DeriveActiveEnum,
)]
#[sea_orm(rs_type = "String", db_type = "String(StringLen::None)")]
pub enum MessageType {
    #[sea_orm(string_value = "default")]
    Default,
    #[sea_orm(string_value = "recipient_added")]
    RecipientAdded,
    #[sea_orm(string_value = "recipient_removed")]
    RecipientRemoved,
}

/// # Message
///
/// The `message` table stores information about messages.
#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize)]
#[sea_orm(table_name = "message")]
pub struct Model {
    #[sea_orm(
        primary_key,
        auto_increment = false,
        column_type = "Uuid",
        column_name = "id",
        indexed
    )]
    pub id: ID,

    #[sea_orm(column_type = "Uuid", column_name = "room_id", indexed)]
    pub room_id: ID,
    #[sea_orm(column_type = "Uuid", column_name = "member_id", indexed, nullable)]
    pub member_id: Option<ID>,

    #[sea_orm(column_type = "Boolean", column_name = "system")]
    pub system: bool,

    /// # Model Tag
    ///
    /// The `model_tag` field stores the tag of the model used to generate the message.
    /// It is an optional field, because not all messages are generated by a model.
    #[sea_orm(column_type = "Text", column_name = "model_tag", nullable)]
    pub model_tag: Option<String>,

    #[sea_orm(column_type = "Text", column_name = "content", nullable)]
    pub content: Option<String>,

    #[sea_orm(column_type = "Text", column_name = "attachment", nullable)]
    pub attachment: Option<String>,

    #[sea_orm(column_type = "Uuid", column_name = "reply_to_id", nullable)]
    pub reply_to: Option<ID>,

    #[sea_orm(column_type = "Text", column_name = "type", nullable)]
    pub message_type: MessageType,
    #[sea_orm(column_type = "Boolean", column_name = "is_hidden")]
    pub is_hidden: bool,

    #[sea_orm(column_type = "BigInteger", column_name = "pinned_at", nullable)]
    pub pinned_at: Option<Timestamp>,

    #[sea_orm(column_type = "BigInteger", column_name = "deleted_at", nullable)]
    pub deleted_at: Option<Timestamp>,
    #[sea_orm(column_type = "BigInteger", column_name = "created_at", auto_now_add)]
    pub created_at: Timestamp,
    #[sea_orm(column_type = "BigInteger", column_name = "updated_at", auto_now)]
    pub updated_at: Timestamp,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Membership,
    Room,
    RepliedToMessage,
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Membership => Entity::belongs_to(crate::entities::room::member::Entity)
                .from(Column::MemberId)
                .to(crate::entities::room::member::Column::Id)
                .into(),
            Self::Room => Entity::belongs_to(crate::entities::room::room::Entity)
                .from(Column::RoomId)
                .to(crate::entities::room::room::Column::Id)
                .into(),
            Self::RepliedToMessage => Entity::belongs_to(crate::entities::room::message::Entity)
                .from(Column::ReplyTo)
                .to(crate::entities::room::message::Column::Id)
                .into(),
        }
    }
}

impl Related<crate::entities::room::member::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Membership.def()
    }
}

impl Related<crate::entities::room::room::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Room.def()
    }
}

impl Related<crate::entities::room::message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RepliedToMessage.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
